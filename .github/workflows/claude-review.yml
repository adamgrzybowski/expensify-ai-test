name: PR Reviews with Claude Code

permissions:
  contents: write
  pull-requests: write

on:
  pull_request_target:
      types: [opened, ready_for_review]
  pull_request_review_comment:
      types: [created]
  workflow_dispatch:
    inputs:
      PULL_REQUEST_URL:
        description: 'The full URL of the E/App pull request.'
        required: true
        type: string

jobs:
  review:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_dispatch' || (!github.event.pull_request.head.repo.fork && !github.event.pull_request.draft)) }}
    steps:
      - name: Check for excluded PRs
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if [[ "$PR_TITLE" == *"Revert"* ]]; then
            echo "::notice::Skipping review because the PR is a revert"
            exit 0
          fi

      - name: Checkout repository
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4
        with:
          fetch-depth: 1

      - name: Filter paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
            filters: |
              code:
                - 'src/**'
              docs:
                - 'docs/**/*.md'
                - 'docs/**/*.csv'
      
      - name: Get PR details
        if: github.event_name == 'workflow_dispatch'
        id: pr-data
        run: |
          echo "::notice::ðŸ”§ Manual workflow dispatch triggered"
          PR_INFO=$(gh pr view "${{ inputs.PULL_REQUEST_URL }}" --json number)
          {
            echo "PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')"
          } >> "$GITHUB_OUTPUT"
          echo "::notice::âœ… Processing PR #$(echo "$PR_INFO" | jq -r '.number')"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Create MCP config
        run: |
          cat > /tmp/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "github_inline_comment": {
                "command": "bun",
                "args": [
                  "run",
                  "${{ github.action_path }}/src/mcp/github-inline-comment-server.ts"
                ],
                "env": {
                  "GITHUB_TOKEN": "${{ github.token }}",
                  "REPO_OWNER": "${{ github.repository_owner }}",
                  "REPO_NAME": "${{ github.event.repository.name || github.repository_owner }}",
                  "PR_NUMBER": "${{ steps.pr-data.outputs.PR_NUMBER || github.event.pull_request.number }}",
                  "GITHUB_API_URL": "https://api.github.com"
                }
              },
              "mcp-server-filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"]
              }
            }
          }
          EOF

      - name: Run Claude Code (code)
        if: steps.filter.outputs.code == 'true'
        uses: anthropics/claude-code-action@e8bad572273ce919ba15fec95aef0ce974464753 # v1.0.13
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ github.token }}
          prompt: |
            Put one inline comment in 195 line of file src/components/MoneyRequestReportView/MoneyRequestReportTransactionList.tsx. 

            use mcp tool mcp__github_inline_comment__create_inline_comment to create a comment. The body of comment is below. If you can't create a comment just sa it, dont' try other methods. Try twice

            If the mcp tool is not available try to list all mcp available tools. Try to create a tmp file in /tmp/ directory with mcp tool that include the body of comment

            use claude mcp list to list all tools available and show me the effect of this function

            <body>

            lalalal # alalalal

            ```js 
            const bb = 1;
            const a = `raz dwa ${bb}`;
            ```
            </body>
          claude_args: |
            --allowedTools "mcp-server-filesystem,mcp__github_inline_comment__create_inline_comment,Bash(claude mcp list:*)"
            --mcp-config /tmp/mcp-config.json