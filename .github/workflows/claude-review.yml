name: PR Reviews with Claude Code

permissions:
  contents: write
  pull-requests: write

on:
  pull_request_target:
      types: [opened, ready_for_review]
  pull_request_review_comment:
      types: [created]
  workflow_dispatch:
    inputs:
      PULL_REQUEST_URL:
        description: 'The full URL of the E/App pull request.'
        required: true
        type: string

jobs:
  review:
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'workflow_dispatch' || (!github.event.pull_request.head.repo.fork && !github.event.pull_request.draft)) }}
    steps:
      - name: Check for excluded PRs
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          if [[ "$PR_TITLE" == *"Revert"* ]]; then
            echo "::notice::Skipping review because the PR is a revert"
            exit 0
          fi

      - name: Checkout repository
        uses: actions/checkout@8ade135a41bc03ea155e62e844d188df1ea18608 # v4
        with:
          fetch-depth: 1

      - name: Filter paths
        uses: dorny/paths-filter@de90cc6fb38fc0963ad72b210f1f284cd68cea36 # v3.0.2
        id: filter
        with:
            filters: |
              code:
                - 'src/**'
              docs:
                - 'docs/**/*.md'
                - 'docs/**/*.csv'
      
      - name: Get PR details
        if: github.event_name == 'workflow_dispatch'
        id: pr-data
        run: |
          echo "::notice::ðŸ”§ Manual workflow dispatch triggered"
          PR_INFO=$(gh pr view "${{ inputs.PULL_REQUEST_URL }}" --json number)
          {
            echo "PR_NUMBER=$(echo "$PR_INFO" | jq -r '.number')"
          } >> "$GITHUB_OUTPUT"
          echo "::notice::âœ… Processing PR #$(echo "$PR_INFO" | jq -r '.number')"
        env:
          GITHUB_TOKEN: ${{ github.token }}
          
      - name: Create MCP config
        run: |
          cat > /tmp/mcp-config.json << 'EOF'
          {
            "mcpServers": {
              "mcp-server-filesystem": {
                "command": "npx",
                "args": ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"]
              }
            }
          }
          EOF

      - name: Run Claude Code (code)
        if: steps.filter.outputs.code == 'true'
        uses: anthropics/claude-code-action@e8bad572273ce919ba15fec95aef0ce974464753 # v1.0.13
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ github.token }}
          prompt: |
            REPO: ${{ github.repository }} 
            PR_NUMBER: ${{ steps.pr-data.outputs.PR_NUMBER || github.event.pull_request.number }}"

            Put one inline comment in 195 line of file src/components/MoneyRequestReportView/MoneyRequestReportTransactionList.tsx. 

            To create a comment you need to:
            - save comment to a tmp file in repo containing body of the comment using mcp__mcp-server-filesystem__write_file
            - post the comment using ghApiComment.sh, example of how to use it is below

            ./.github/scripts/ghApiComment.sh --pr 123 --sha COMMIT_SHA --path src/file.ts --position 17 --body-file /path/to/body.md
            
            if this command requires approval, explain why

            <body>
            lalalal # alalalal

            ```js 
            const bb = 1;
            const a = `raz dwa ${bb}`;
            ```
            </body>
          claude_args: |
            --allowedTools "mcp__github_inline_comment__create_inline_comment,mcp__mcp-server-filesystem__write_file,Bash(.github/scripts/ghApiComment.sh),Bash(.github/scripts/ghApiComment.sh:*),Bash(ghApiComment.sh),Bash(ghApiComment),Bash(gh pr comment:*),Bash(gh api:*)"
            --mcp-config /tmp/mcp-config.json